# API SETTINGS
APPLICATION_TITLE=Cybercommons
DEBUG=False
ALLOWED_HOSTS=localhost,127.0.0.1

# Prefix for docker volume used with mongo
MONGO_DOCKER_VOLUME_PREFIX=cc

# CELERY MONGO DB and Colection - Stores the task history and the tombstone result for all tasks.
MONGO_DB=cybercom
MONGO_TOMBSTONE_COLLECTION=tombstone
MONGO_LOG_COLLECTION=task_log

# Celery IMPORTS and SOURCE is a comma delimited string
# SOURCE must be a python package with setup.py configured with dependencies managed
#CELERY_IMPORTS=cybercomq
#CELERY_SOURCE=git+https://github.com/cybercommons/cybercomq@celery5
CELERY_IMPORTS=ecopadq
CELERY_SOURCE=git+https://github.com/ou-ecolab/ecopadq
#CELERY_SOURCE=git+https://github.com/ou-ecolab/ecopadq@test
# Note: mm 19-1-2022:
# For testing we switch to a temporary branch of ecopadq 
# (Here called 'test' indicated by the '@test' at the end of the commented github url above) 
# Since the celery worker installs the package from github we have
# to commit every change and restart the celery container for the change to take effect.
# Most of these commits will not achieve what we wanted and the commit history of the branch we use
# will get messed up. 
# Since we do not want this to happen to the master branch, we 
# collect all the uninformative commits in a temporary branch. 
# (which we can locally create by "git branch test")
# After we have achieved our goal with maybe the 20th commit to the testbranch
# we rewrite it's history by 'squash'-ing all the tiny commits 
# into one sensible commit with a descriptive commit message as described here.
#
# https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History
#
# Then we merge this one commit into the master branch of ecopadq and change the
# CELERY_SOURCE variable back to the url without the '@test'.
# Then we remove the test branch locally and remotely.
# by (inside ecopadq dir) 
# git branch rm test
# git push origin --delete test 
CELERY_QUEUE=celery
CELERY_SSH_USER=celery


# Celery and API LOG_LEVEL (DEBUG, INFO, WARNING, ERROR, or CRITICAL)
LOG_LEVEL=INFO
DJANGO_LOG_LEVEL=INFO

# Set resource constraints
API_CPUS=1.5

#### Change of variables below requires knowledge of Cybercom and Docker Compose Volumes #### 
RABBITMQ_SSL_CERT_FILE=/ssl/server/cert.pem
RABBITMQ_SSL_KEY_FILE=/ssl/server/key.pem
RABBITMQ_SSL_CA_FILE=/ssl/testca/cacert.pem
BROKER_USE_SSL=true
SSL_PATH=/ssl
#### 


#### NGINX 
NGINX_HOST=localhost
# values are default or letsencrypt, if not set uses default
NGINX_TEMPLATE=

#### Container Versions
NGINX_VERSION=1.21.6
MONGO_VERSION=5.0.6
RABBITMQ_VERSION=3.8.27
MEMCACHED_VERSION=1.6.14
API_VERSION=latest
DOCKER_PYTHON_VERSION=3.9.10-slim-buster

